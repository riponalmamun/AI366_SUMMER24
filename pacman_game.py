# -*- coding: utf-8 -*-
"""Pacman Game.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I5sYBEWzafqQnYjn0_QoFqYggMW6FkHM
"""

import util


class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).

    You do not need to change anything in this class, ever.
    """

    def get_start_state(self):
        """
        Returns the start state for the search problem.
        """
        util.raise_not_defined()

    def is_goal_state(self, state):
        """
          state: Search state

        Returns True if and only if the state is a valid goal state.
        """
        util.raise_not_defined()

    def get_successors(self, state):
        """
          state: Search state

        For a given state, this should return a list of triples, (successor,
        action, stepCost), where 'successor' is a successor to the current
        state, 'action' is the action required to get there, and 'stepCost' is
        the incremental cost of expanding to that successor.
        """
        util.raise_not_defined()

    def get_cost_of_actions(self, actions):
        """
        actions: A list of actions to take

        This method returns the total cost of a particular sequence of actions.
        The sequence must be composed of legal moves.
        """
        util.raise_not_defined()


def tiny_maze_search(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other maze, the
    sequence of moves will be incorrect, so only use this for tinyMaze.
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return [s, s, w, s, w, w, s, w]


def depth_first_search(problem):
    """
    Search the deepest nodes in the search tree first.

    Your search algorithm needs to return a list of actions that reaches the
    goal. Make sure to implement a graph search algorithm.

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:

    print("Start:", problem.get_start_state())
    print("Is the start a goal?", problem.is_goal_state(problem.get_start_state()))
    print("Start's successors:", problem.get_successors(problem.get_start_state()))
    """
    from util import Stack

    # Initialize the stack with the start state
    fringe = Stack()
    fringe.push((problem.get_start_state(), [])) # (current_state, actions)
    visited = set()

    while not fringe.is_empty():
        state, actions = fringe.pop()

        if state in visited:
            continue

        visited.add(state)

        if problem.is_goal_state(state):
            return actions

        for successor, action, step_cost in problem.get_successors(state):
            if successor not in visited:
                fringe.push((successor, actions + [action]))

    return []


def breadth_first_search(problem):
    """Search the shallowest nodes in the search tree first."""
    from util import Queue

    # Initialize the queue with the start state
    fringe = Queue()
    fringe.push((problem.get_start_state(), [])) # (current_state, actions)
    visited = set()

    while not fringe.is_empty():
        state, actions = fringe.pop()

        if state in visited:
            continue

        visited.add(state)

        if problem.is_goal_state(state):
            return actions

        for successor, action, step_cost in problem.get_successors(state):
            if successor not in visited:
                fringe.push((successor, actions + [action]))

    return []


def uniform_cost_search(problem):
    """Search the node of least total cost first."""
    from util import PriorityQueue

    # Initialize the priority queue with the start state
    fringe = PriorityQueue()
    fringe.push((problem.get_start_state(), []), 0)
    visited = {}

    while not fringe.is_empty():
        state, actions = fringe.pop()

        if state in visited and visited[state] <= problem.get_cost_of_actions(actions):
            continue

        visited[state] = problem.get_cost_of_actions(actions)

        if problem.is_goal_state(state):
            return actions

        for successor, action, step_cost in problem.get_successors(state):
            new_actions = actions + [action]
            fringe.push((successor, new_actions), problem.get_cost_of_actions(new_actions))

    return []


def null_heuristic(state, problem=None):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0


def a_star_search(problem, heuristic=null_heuristic):
    """Search the node that has the lowest combined cost and heuristic first."""
    from util import PriorityQueue

    # Initialize the priority queue with the start state
    fringe = PriorityQueue()
    fringe.push((problem.get_start_state(), []), heuristic(problem.get_start_state(), problem))
    visited = {}

    while not fringe.is_empty():
        state, actions = fringe.pop()

        if state in visited and visited[state] <= problem.get_cost_of_actions(actions):
            continue

        visited[state] = problem.get_cost_of_actions(actions)

        if problem.is_goal_state(state):
            return actions

        for successor, action, step_cost in problem.get_successors(state):
            new_actions = actions + [action]
            cost = problem.get_cost_of_actions(new_actions) + heuristic(successor, problem)
            fringe.push((successor, new_actions), cost)

    return []


# Abbreviations
bfs = breadth_first_search
dfs = depth_first_search
astar = a_star_search
ucs = uniform_cost_search